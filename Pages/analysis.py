## -*- coding: utf-8 -*-
"""analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FWRQbp8jWBVK_ezjF7g9EDJpwimgadGa
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns
import globals
import graficos
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Carregar os dados
df = pd.read_excel('https://github.com/MichaelJourdain93/Datathon_Passos_Magicos/raw/main/Datasets/dt_curated_passos_magicos.xlsx', engine='openpyxl')

# T√≠tulo da P√°gina
st.title("üìä An√°lise dos Dados da ONG Passos M√°gicos")

# Mostrar os primeiros dados
st.subheader("Visualiza√ß√£o dos Dados")

tab1, tab2 = st.tabs(['Indicadores', 'An√°lises'])

with tab1:
    cbAno = st.selectbox('Selecione o Ano:', list(globals.lAno.keys()), key="cbAno")
    df_ano = globals.df
    if cbAno != 'Todos':
        df_ano = globals.df[globals.df['ANO'] == globals.lAno[cbAno]]
        if globals.lAno[cbAno] > 2022:
            df_ano_anterior = globals.df[globals.df['ANO'] == globals.lAno[cbAno] - 1]

    num_colunas_pedras = len(globals.lPedras)
    colunas_2 = st.columns(num_colunas_pedras)
    for i, dados in enumerate(globals.lPedras):
        coluna_atual = colunas_2[i % num_colunas_pedras]
        with coluna_atual:
            if cbAno != 'Todos' and globals.lAno[cbAno] > 2022:
                st.metric(dados, np.sum(df_ano['PEDRA'] == dados), delta=int(np.sum(df_ano['PEDRA'] == dados) - np.sum(df_ano_anterior['PEDRA'] == dados)))
            else:
                st.metric(dados, np.sum(df_ano['PEDRA'] == dados), delta=None)
    num_colunas = len(globals.lIndicadores_1)
    colunas_1 = st.columns(num_colunas, border=True)

    for i, dados in enumerate(globals.lIndicadores_1):
        coluna_atual = colunas_1[i % num_colunas]
        with coluna_atual:
            st.subheader(dados, help='Comparativo em rela√ß√£o ao ano anterior')
            if(cbAno != 'Todos' and globals.lAno[cbAno] > 2022):
                st.metric('M√©dia:', df_ano[dados].mean().round(2), border=False, delta=round(df_ano[dados].mean().round(2) - df_ano_anterior[dados].mean().round(2),2))
                st.metric('Mediana:', df_ano[dados].median().round(2), border=False, delta=round(df_ano[dados].median().round(2) - df_ano_anterior[dados].median().round(2),2))
                st.metric('Min:', df_ano[dados].min().round(2), border=False, delta=round(df_ano[dados].min().round(2) - df_ano_anterior[dados].min().round(2),2))
                st.metric('Max:', df_ano[dados].max().round(2), border=False, delta=round(df_ano[dados].max().round(2) - df_ano_anterior[dados].max().round(2), 2))
            else:
                st.metric('M√©dia:', df_ano[dados].mean().round(2),border=False, delta=None, delta_color='off')
                st.metric('Mediana:', df_ano[dados].median().round(2),border=False, delta=None, delta_color='off')
                st.metric('Min:', df_ano[dados].min().round(2),border=False, delta=None, delta_color='off')
                st.metric('Max:', df_ano[dados].max().round(2),border=False, delta=None, delta_color='off')

# An√°lise descritiva b√°sica
with tab2:
    st.subheader("Distribui√ß√£o dos Alunos por G√™nero")
    fig, ax = plt.subplots(figsize=(10, 6))
    df['G√™nero'].value_counts().plot(kind='bar', ax=ax)
    ax.set_title('Distribui√ß√£o dos Alunos por G√™nero')
    ax.set_xlabel('G√™nero')
    ax.set_ylabel('N√∫mero de Alunos')
    st.pyplot(fig)

    st.subheader("Distribui√ß√£o dos Alunos por Fase")
    fig, ax = plt.subplots(figsize=(12, 6))
    df['Fase'].value_counts().sort_index().plot(kind='bar', ax=ax)
    ax.set_title('Distribui√ß√£o dos Alunos por Fase')
    ax.set_xlabel('Fase')
    ax.set_ylabel('N√∫mero de Alunos')
    st.pyplot(fig)

    st.subheader("Rela√ß√£o entre INDE e IDA")
    fig = px.scatter(df, x='INDE', y='IDA', color='Pedra', hover_data=['Nome', 'Fase', 'Idade'])
    st.plotly_chart(fig)

    st.subheader("Distribui√ß√£o das Notas por Disciplina")
    fig, ax = plt.subplots(figsize=(12, 6))
    df[['Mat', 'Por', 'Ing']].boxplot(ax=ax)
    ax.set_title('Distribui√ß√£o das Notas por Disciplina')
    ax.set_ylabel('Notas')
    st.pyplot(fig)

    st.subheader("Mapa de Correla√ß√£o entre Indicadores e Notas")
    fig, ax = plt.subplots(figsize=(12, 10))
    sns.heatmap(df[['INDE', 'IAA', 'IEG', 'IPS', 'IDA', 'IPV', 'IAN', 'IPP', 'Mat', 'Por', 'Ing']].corr(), annot=True, cmap='coolwarm', ax=ax)
    ax.set_title('Mapa de Correla√ß√£o')
    st.pyplot(fig)

    st.subheader("Distribui√ß√£o de Pedras por Fase")
    pedra_fase = pd.crosstab(df['Fase'], df['Pedra'])
    fig = go.Figure(data=[
        go.Bar(name=pedra, x=pedra_fase.index, y=pedra_fase[pedra]) for pedra in pedra_fase.columns
    ])
    fig.update_layout(barmode='stack', title='Distribui√ß√£o de Pedras por Fase')
    st.plotly_chart(fig)

    st.subheader("Compara√ß√£o dos Indicadores M√©dios por Pedra")
    indicadores = ['INDE', 'IAA', 'IEG', 'IPS', 'IDA', 'IPV', 'IAN', 'IPP']
    medias_por_pedra = df.groupby('Pedra')[indicadores].mean()
    fig = go.Figure()
    for pedra in medias_por_pedra.index:
        fig.add_trace(go.Scatterpolar(
            r=medias_por_pedra.loc[pedra],
            theta=indicadores,
            fill='toself',
            name=pedra
        ))
    fig.update_layout(
        polar=dict(radialaxis=dict(visible=True, range=[0, 10])),
        showlegend=True,
        title='Compara√ß√£o dos Indicadores M√©dios por Pedra'
    )
    st.plotly_chart(fig)

    st.subheader("Evolu√ß√£o do INDE ao Longo dos Anos")
    df['Ano Letivo'] = pd.to_datetime(df['Ano Letivo'], format='%Y')
    inde_por_ano = df.groupby('Ano Letivo')['INDE'].mean().reset_index()
    fig = px.line(inde_por_ano, x='Ano Letivo', y='INDE', title='Evolu√ß√£o do INDE ao Longo dos Anos')
    st.plotly_chart(fig)

# Storytelling
st.subheader("Storytelling: Impacto da ONG Passos M√°gicos")
st.write("A an√°lise dos dados da ONG Passos M√°gicos revela insights importantes sobre o impacto do programa:")
st.write("**1. Diversidade de Atendimento:**")
st.write(f"- A ONG atende {df['G√™nero'].nunique()} g√™neros diferentes.")
st.write(f"- Os alunos est√£o distribu√≠dos em {df['Fase'].nunique()} fases diferentes, mostrando a amplitude do programa.")

st.write("**2. Desempenho Acad√™mico:**")
st.write(f"- A m√©dia do IDA (Indicador de Desempenho Acad√™mico) √© {df['IDA'].mean():.2f}.")
st.write(f"- Correla√ß√£o positiva de {df['INDE'].corr(df['IDA']):.2f} entre INDE e IDA.")

st.write("**3. Engajamento e Desenvolvimento:**")
st.write(f"- IEG m√©dio: {df['IEG'].mean():.2f}, indicando bom n√≠vel de participa√ß√£o.")
st.write(f"- IPV m√©dio: {df['IPV'].mean():.2f}, mostrando progresso significativo.")

st.write("**4. Impacto por Tipo de Institui√ß√£o:**")
instituicoes = df.groupby('Institui√ß√£o de ensino')['IDA'].mean().sort_values(ascending=False)
st.write(f"- Maior IDA m√©dio: '{instituicoes.index[0]}' com {instituicoes.iloc[0]:.2f}.")
st.write(f"- Menor IDA m√©dio: '{instituicoes.index[-1]}' com {instituicoes.iloc[-1]:.2f}.")

st.write("**5. Evolu√ß√£o ao Longo do Tempo:**")
inde_inicial = inde_por_ano['INDE'].iloc[0]
inde_final = inde_por_ano['INDE'].iloc[-1]
variacao_inde = (inde_final - inde_inicial) / inde_inicial * 100
st.write(f"- O INDE m√©dio variou de {inde_inicial:.2f} para {inde_final:.2f}, uma mudan√ßa de {variacao_inde:.2f}%.")

st.write("**Conclus√£o:**")
st.write("A an√°lise demonstra que a ONG Passos M√°gicos tem um impacto positivo significativo na vida dos estudantes atendidos. O programa melhora o desempenho acad√™mico e promove o engajamento e desenvolvimento pessoal.")
